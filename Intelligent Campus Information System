import { useState, useRef, useEffect } from "react";

// Define types for our data
interface ChatMessage {
  id: number;
  text: string;
  sender: 'user' | 'bot';
  timestamp: Date;
}

interface Event {
  id: number;
  title: string;
  date: Date;
  location: string;
  description: string;
}

interface Facility {
  name: string;
  hours: string;
  status: 'open' | 'closed';
}

const CampusAssistant = () => {
  // State for chat messages
  const [messages, setMessages] = useState<ChatMessage[]>([
    {
      id: 1,
      text: "Hello! I'm your campus assistant. How can I help you today?",
      sender: 'bot',
      timestamp: new Date()
    }
  ]);
  
  // State for user input
  const [inputText, setInputText] = useState('');
  
  // State for active module
  const [activeModule, setActiveModule] = useState<'chat' | 'academics' | 'facilities' | 'events'>('chat');
  
  // Ref for auto-scrolling to new messages
  const messagesEndRef = useRef<HTMLDivElement>(null);
  
  // Sample data for facilities
  const facilities: Facility[] = [
    { name: "Main Library", hours: "8:00 AM - 10:00 PM", status: "open" },
    { name: "Student Center", hours: "7:00 AM - 11:00 PM", status: "open" },
    { name: "Campus Gym", hours: "6:00 AM - 11:00 PM", status: "open" },
    { name: "Dining Hall", hours: "7:00 AM - 9:00 PM", status: "open" },
    { name: "Administrative Office", hours: "9:00 AM - 5:00 PM", status: "closed" },
  ];
  
  // Sample data for events
  const events: Event[] = [
    { 
      id: 1, 
      title: "Spring Festival", 
      date: new Date(2023, 4, 15), 
      location: "Main Quad", 
      description: "Annual spring celebration with food, games, and performances" 
    },
    { 
      id: 2, 
      title: "Career Fair", 
      date: new Date(2023, 4, 22), 
      location: "Student Center Ballroom", 
      description: "Meet employers and explore internship opportunities" 
    },
    { 
      id: 3, 
      title: "Final Exams", 
      date: new Date(2023, 5, 5), 
      location: "Various Classrooms", 
      description: "Spring semester final examination period" 
    },
  ];

  // Auto-scroll to bottom when new messages are added
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  // Handle sending a message
  const handleSendMessage = () => {
    if (inputText.trim() === '') return;
    
    // Add user message
    const userMessage: ChatMessage = {
      id: messages.length + 1,
      text: inputText,
      sender: 'user',
      timestamp: new Date()
    };
    
    setMessages(prev => [...prev, userMessage]);
    setInputText('');
    
    // Simulate bot response after a short delay
    setTimeout(() => {
      const botResponse = generateBotResponse(inputText);
      const botMessage: ChatMessage = {
        id: messages.length + 2,
        text: botResponse,
        sender: 'bot',
        timestamp: new Date()
      };
      setMessages(prev => [...prev, botMessage]);
    }, 1000);
  };

  // Generate a bot response based on user input
  const generateBotResponse = (input: string): string => {
    const lowercaseInput = input.toLowerCase();
    
    // Check for common queries and respond accordingly
    if (lowercaseInput.includes('library') || lowercaseInput.includes('study')) {
      return "The main library is open from 8 AM to 10 PM every day. You can find study rooms on the 2nd and 3rd floors.";
    } else if (lowercaseInput.includes('dining') || lowercaseInput.includes('food') || lowercaseInput.includes('eat')) {
      return "The dining hall serves breakfast from 7-10 AM, lunch from 11:30 AM-2 PM, and dinner from 5-8 PM. There are also several cafes around campus.";
    } else if (lowercaseInput.includes('schedule') || lowercaseInput.includes('class')) {
      return "You can view your academic schedule through the student portal. The fall semester runs from August 28 to December 15.";
    } else if (lowercaseInput.includes('event') || lowercaseInput.includes('campus activity')) {
      return "We have several upcoming events! Check the events section to see what's happening on campus.";
    } else if (lowercaseInput.includes('administrat') || lowercaseInput.includes('office')) {
      return "Administrative offices are open Monday to Friday, 9 AM to 5 PM. You can contact them at admin@campus.edu or call (555) 123-4567.";
    } else if (lowercaseInput.includes('gym') || lowercaseInput.includes('workout')) {
      return "The campus gym is open from 6 AM to 11 PM. It features cardio equipment, weight training areas, and a swimming pool.";
    } else {
      return "I'm not sure I understand. Could you please rephrase your question? You can ask me about library hours, dining services, academic schedules, campus events, or administrative procedures.";
    }
  };

  // Handle quick action buttons
  const handleQuickAction = (action: string) => {
    setInputText(action);
    setTimeout(() => handleSendMessage(), 100);
  };

  // Format date for display
  const formatDate = (date: Date): string => {
    return date.toLocaleDateString('en-US', { 
      month: 'short', 
      day: 'numeric',
      year: 'numeric'
    });
  };

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col">
      {/* Header */}
      <header className="bg-blue-600 text-white p-4 shadow-md">
        <div className="container mx-auto flex justify-between items-center">
          <h1 className="text-2xl font-bold">Campus AI Assistant</h1>
          <nav className="flex space-x-4">
            <button 
              onClick={() => setActiveModule('chat')}
              className={⁠ px-3 py-1 rounded-lg ${activeModule === 'chat' ? 'bg-blue-700' : 'hover:bg-blue-500'} ⁠}
            >
              Chat
            </button>
            <button 
              onClick={() => setActiveModule('academics')}
              className={⁠ px-3 py-1 rounded-lg ${activeModule === 'academics' ? 'bg-blue-700' : 'hover:bg-blue-500'} ⁠}
            >
              Academics
            </button>
            <button 
              onClick={() => setActiveModule('facilities')}
              className={⁠ px-3 py-1 rounded-lg ${activeModule === 'facilities' ? 'bg-blue-700' : 'hover:bg-blue-500'} ⁠}
            >
              Facilities
            </button>
            <button 
              onClick={() => setActiveModule('events')}
              className={⁠ px-3 py-1 rounded-lg ${activeModule === 'events' ? 'bg-blue-700' : 'hover:bg-blue-500'} ⁠}
            >
              Events
            </button>
          </nav>
        </div>
      </header>

      {/* Main Content */}
      <main className="flex-grow container mx-auto p-4 flex flex-col md:flex-row">
        {/* Information Panel */}
        <div className="w-full md:w-1/3 lg:w-1/4 bg-white p-4 rounded-lg shadow-md mb-4 md:mb-0 md:mr-4">
          <h2 className="text-xl font-semibold mb-4 text-blue-800">
            {activeModule === 'chat' && 'Quick Questions'}
            {activeModule === 'academics' && 'Academic Info'}
            {activeModule === 'facilities' && 'Facility Hours'}
            {activeModule === 'events' && 'Upcoming Events'}
          </h2>
          
          {activeModule === 'chat' && (
            <div className="space-y-2">
              <button 
                onClick={() => handleQuickAction("What are the library hours?")}
                className="w-full text-left p-3 bg-blue-100 rounded-lg hover:bg-blue-200 transition"
              >
                Library Hours
              </button>
              <button 
                onClick={() => handleQuickAction("When is the dining hall open?")}
                className="w-full text-left p-3 bg-blue-100 rounded-lg hover:bg-blue-200 transition"
              >
                Dining Hours
              </button>
              <button 
                onClick={() => handleQuickAction("What events are happening?")}
                className="w-full text-left p-3 bg-blue-100 rounded-lg hover:bg-blue-200 transition"
              >
                Campus Events
              </button>
              <button 
                onClick={() => handleQuickAction("How do I contact administration?")}
                className="w-full text-left p-3 bg-blue-100 rounded-lg hover:bg-blue-200 transition"
              >
                Admin Contact
              </button>
            </div>
          )}
          
          {activeModule === 'academics' && (
            <div>
              <h3 className="font-medium mb-2">Academic Calendar</h3>
              <ul className="list-disc pl-5 space-y-1">
                <li>Fall Semester: Aug 28 - Dec 15</li>
                <li>Spring Semester: Jan 16 - May 10</li>
                <li>Final Exams: Dec 11-15 / May 8-12</li>
                <li>Registration Period: Apr 3-14 / Nov 6-17</li>
              </ul>
              
              <h3 className="font-medium mt-4 mb-2">Resources</h3>
              <ul className="list-disc pl-5 space-y-1">
                <li>Student Portal: portal.campus.edu</li>
                <li>Academic Advising: Mon-Fri, 9AM-4PM</li>
                <li>Registrar Office: (555) 123-REG1</li>
              </ul>
            </div>
          )}
          
          {activeModule === 'facilities' && (
            <div className="space-y-4">
              {facilities.map(facility => (
                <div key={facility.name} className="p-3 bg-gray-50 rounded-lg border">
                  <div className="flex justify-between items-start">
                    <h3 className="font-medium">{facility.name}</h3>
                    <span className={`text-xs px-2 py-1 rounded-full ${
                      facility.status === 'open' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                    }`}>
                      {facility.status}
                    </span>
                  </div>
                  <p className="text-sm text-gray-600 mt-1">{facility.hours}</p>
                </div>
              ))}
            </div>
          )}
          
          {activeModule === 'events' && (
            <div className="space-y-4">
              {events.map(event => (
                <div key={event.id} className="p-3 bg-gray-50 rounded-lg border">
                  <h3 className="font-medium">{event.title}</h3>
                  <p className="text-sm text-gray-600 mt-1">{formatDate(event.date)} • {event.location}</p>
                  <p className="text-xs text-gray-500 mt-2">{event.description}</p>
                </div>
              ))}
            </div>
          )}
        </div>
        
        {/* Chat Interface */}
        <div className="flex-grow flex flex-col bg-white rounded-lg shadow-md p-4">
          <div className="flex-grow mb-4 overflow-y-auto" style={{ maxHeight: '60vh' }}>
            <div className="space-y-4">
              {messages.map(message => (
                <div key={message.id} className={⁠ flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'} ⁠}>
                  <div className={`max-w-xs md:max-w-md lg:max-w-lg rounded-lg p-3 ${
                    message.sender === 'user' 
                      ? 'bg-blue-600 text-white rounded-br-none' 
                      : 'bg-gray-200 text-gray-800 rounded-bl-none'
                  }`}>
                    <p>{message.text}</p>
                    <p className={⁠ text-xs mt-1 ${message.sender === 'user' ? 'text-blue-200' : 'text-gray-500'} ⁠}>
                      {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                    </p>
                  </div>
                </div>
              ))}
              <div ref={messagesEndRef} />
            </div>
          </div>
          
          <div className="flex items-center">
            <input
              type="text"
              value={inputText}
              onChange={(e) => setInputText(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
              placeholder="Type your question here..."
              className="flex-grow p-3 border rounded-l-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
            <button
              onClick={handleSendMessage}
              disabled={inputText.trim() === ''}
              className="bg-blue-600 text-white p-3 rounded-r-lg hover:bg-blue-700 disabled:bg-blue-300 transition"
            >
              Send
            </button>
          </div>
        </div>
      </main>

      {/* Footer */}
      <footer className="bg-gray-800 text-white p-4 text-center">
        <p>© 2023 Campus University • AI Assistant v1.0</p>
      </footer>
    </div>
  );
};

